# CivitScraper Configuration File
# This is the main configuration file that controls how CivitScraper operates.

# =============================================================================
# API Configuration
# Settings for connecting to the CivitAI API
# =============================================================================
api:
  key: "YOUR_API_KEY"                # Your CivitAI API key (Set via CIVITAI_API_KEY environment variable)
  base_url: "https://civitai.com/api/v1"  # API endpoint
  timeout: 30             # [seconds] API request timeout
  max_retries: 3         # Number of times to retry failed requests
  user_agent: "CivitScraper/0.2.0"  # User agent string

  # Batch processing settings (for advanced users)
  batch:
    enabled: true         # [true/false] Enable batch processing
    max_concurrent: 4     # Maximum parallel requests using thread-safe semaphore
    rate_limit: 100      # Requests/minute (uses token bucket with per-endpoint tracking)
    retry_delay: 1000    # Base delay (ms) for exponential backoff when rate limited
    cache_size: 100      # LRU cache size - evicts least recently used entries when full

    # Advanced batch settings
    # Circuit breaker prevents API abuse during outages by tracking failures per endpoint
    circuit_breaker:
      failure_threshold: 5    # Number of failures before blocking requests to an endpoint
      reset_timeout: 60       # Seconds to wait before auto-recovery after blocking

# =============================================================================
# Input Paths
# Define where to look for different types of model files
# Example paths shown - adjust these to match your setup
# =============================================================================
input_paths:
  # LORA models directory
  lora:
    path: "path/to/loras"           # Directory containing LORA models
    type: LORA                      # Model type identifier
    patterns: ["*.safetensors"]  # File patterns to match

  # ALL LORA models directory
  all-lora:
    path: "path/to/all-loras"           # Directory containing all LORA models
    type: LORA                      # Model type identifier
    patterns: ["*.safetensors"]  # File patterns to match

  # Stable Diffusion checkpoints
  checkpoints:
    path: "path/to/checkpoints"  # Directory containing checkpoints
    type: Checkpoint                   # Model type identifier
    patterns: ["*.safetensors"]  # File patterns to match

  # Textual Inversion embeddings
  embeddings:
    path: "path/to/embeddings"     # Directory containing embeddings
    type: TextualInversion         # Model type identifier
    patterns: ["*.pt", "*.safetensors"]  # File patterns to match

# =============================================================================
# Default Job
# The job to run when no job is specified
# =============================================================================
default_job: "fetch-all"

# =============================================================================
# Jobs
# Define specific tasks to run
# Each job is self-contained with all necessary settings
# =============================================================================
jobs:
  # Process all model types with full settings
  fetch-all:
    type: scan-paths
    recursive: false      # Search in subdirectories
    skip_existing: false  # Skip files that already have metadata
    verify_hashes: true  # Verify file hashes against CivitAI data
    paths: ["lora"]      # Process these path types
    output:
      metadata:
        format: "json"
        path: "{model_dir}"     # Where to save metadata
        filename: "{model_name}.json"  # Metadata filename
        html:
          enabled: true         # Generate HTML preview pages
          filename: "{model_name}.html"  # HTML filename
          skip_existing_html: true  # Skip existing HTML files (independent of metadata skip_existing)
          generate_gallery: true
          gallery_path: "path/to/html-output/model_gallery.html"
          gallery_title: "Model Gallery"
      images:
        save: true             # Download preview images
        path: "{model_dir}"    # Where to save images
        max_count: 2        # Maximum number of images to download (null for no limit)
        filenames:
          preview: "{model_name}.preview{ext}"  # Preview image filename pattern
    organization:
      enabled: true            # Enable model organization
      # Available predefined templates:
      # - by_type: Organize by model type
      # - by_creator: Organize by creator
      # - by_type_and_creator: Organize by type and creator
      # - by_type_and_basemodel: Organize by type and base model
      # - by_base_model: Organize by base model and type
      # - by_nsfw: Organize by NSFW status and type
      # - by_type_basemodel_nsfw: Organize by type, base model, and NSFW status
      # - by_date: Organize by year, month, and type
      # - by_model_info: Organize by model type and name
      # - by_rating: Organize by weighted rating and type
      # - by_type_and_rating: Organize by type and weighted rating
      template: "by_type_and_rating"  # Use predefined organization template
      # Or use custom template with available placeholders:
      # {model_name}: Model name
      # {model_type} or {type}: Model type
      # {creator}: Creator username
      # {base_model}: Base model
      # {nsfw}: NSFW status (nsfw/sfw)
      # {year}: Creation year
      # {month}: Creation month
      # {weighted_rating}: Rating (1-5) adjusted by rating count vs downloads
      # {weighted_thumbsup}: Normalized thumbs up rating (1-5) based on ratio
      custom_template: "{type}/{creator}/{base_model}/{weighted_rating}"
      output_dir: "{model_dir}/organized"  # Where to put organized files
      operation_mode: "symlink"    # [copy/move/symlink] How to organize files

      # Controls behavior when the target file already exists:
      # 'skip': (Default) Does not move/copy/link the file, logs a message.
      # 'overwrite': Removes the existing file first, then proceeds. Fails if removal fails.
      # 'fail': Stops processing for that specific file and logs an error.
      on_collision: skip # Choose 'skip', 'overwrite', or 'fail'


  # Organize by rating example
  organize-by-rating:
    type: scan-paths
    recursive: true
    paths: ["lora", "checkpoints"]
    output:
      metadata:
        format: "json"
        path: "{model_dir}"
    organization:
      enabled: true
      template: "by_rating"  # Uses weighted rating system (1-5)
      output_dir: "path/to/rating-organized"
      operation_mode: "symlink"

  # Date-based organization example
  organize-by-date:
    type: scan-paths
    recursive: true
    paths: ["lora"]
    organization:
      enabled: true
      template: "by_date"  # Organizes by year/month
      output_dir: "path/to/date-organized"
      operation_mode: "copy"

  # NSFW filtering example
  organize-nsfw:
    type: scan-paths
    recursive: true
    paths: ["lora", "checkpoints"]
    organization:
      enabled: true
      template: "by_nsfw"  # Separates NSFW/SFW content
      output_dir: "path/to/nsfw-organized"
      operation_mode: "symlink"

  # Metadata-only job (no images)
  metadata-only:
    type: scan-paths
    recursive: true
    skip_existing: true
    verify_hashes: true
    paths: ["lora"]
    organize: false
    output:
      metadata:
        format: "json"
        path: "{model_dir}"
        filename: "{model_name}.json"
        html:
          enabled: true
          filename: "{model_name}.html"
          skip_existing_html: true  # Skip existing HTML files (independent of metadata skip_existing)
          generate_gallery: true
          gallery_path: "path/to/html-output/model_gallery.html"
          gallery_title: "Model Gallery"
      images:
        save: false             # Don't download images

  # Synchronize LoRA trigger words
  sync-triggers:
    type: sync-lora-triggers
    description: "Synchronize LoRA trigger words"
    recursive: true
    loras_file: "path/to/loras.json"
    overwrite_triggers: true  # [true/false] Overwrite existing trigger words
    paths: ["lora"]

# =============================================================================
# Scanner Settings
# Configure how the scanner operates and caches data
# =============================================================================
scanner:
  cache_dir: ".civitscraper_cache"  # Where to store cache files
  cache_validity: 86400            # [seconds] Cache lifetime (24 hours)
  force_refresh: false             # [true/false] Ignore cache and force refresh

# =============================================================================
# Logging Configuration
# Control how the application logs information
# =============================================================================
logging:
  level: DEBUG                     # [DEBUG/INFO/WARNING/ERROR/CRITICAL] Main log level

  # Console output settings
  console:
    enabled: true                  # [true/false] Log to console
    level: INFO                # Console log level
    simple: false                  # Use detailed format for debugging

  # File logging settings
  file:
    enabled: true                  # [true/false] Log to file
    level: DEBUG                   # File log level
    directory: logs                # Log file directory
    max_size: 10                  # [MB] Max log file size
    backup_count: 5               # Number of backup files to keep
