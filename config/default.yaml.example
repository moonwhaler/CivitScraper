# CivitScraper Configuration File
# This is the main configuration file that controls how CivitScraper operates.

# =============================================================================
# API Configuration
# Settings for connecting to the CivitAI API
# =============================================================================
api:
  key: "YOUR_API_KEY_HERE"                # Your CivitAI API key (Set via CIVITAI_API_KEY environment variable)
  base_url: "https://civitai.com/api/v1"  # API endpoint
  timeout: 30             # [seconds] API request timeout
  max_retries: 3         # Number of times to retry failed requests
  user_agent: "CivitScraper/0.2.0"  # User agent string

  # Batch processing settings (for advanced users)
  batch:
    enabled: true         # [true/false] Enable batch processing
    max_concurrent: 4     # Maximum parallel requests using thread-safe semaphore
    rate_limit: 100      # Requests/minute (uses token bucket with per-endpoint tracking)
    retry_delay: 1000    # Base delay (ms) for exponential backoff when rate limited
    cache_size: 100      # LRU cache size - evicts least recently used entries when full

    # Advanced batch settings
    # Circuit breaker prevents API abuse during outages by tracking failures per endpoint
    circuit_breaker:
      failure_threshold: 5    # Number of failures before blocking requests to an endpoint
      reset_timeout: 60       # Seconds to wait before auto-recovery after blocking

# =============================================================================
# Input Paths
# Define where to look for different types of model files
# Example paths shown - adjust these to match your setup
# =============================================================================
input_paths:
  # LORA models directory
  lora:
    path: "/path/to/loras"           # Directory containing LORA models
    type: LORA                      # Model type identifier
    patterns: ["*.safetensors"]  # File patterns to match

  # Stable Diffusion checkpoints
  checkpoints:
    path: "/path/to/checkpoints"  # Directory containing checkpoints
    type: Checkpoint                   # Model type identifier
    patterns: ["*.safetensors"]  # File patterns to match

  # Textual Inversion embeddings
  embeddings:
    path: "./models/embeddings"     # Directory containing embeddings
    type: TextualInversion         # Model type identifier
    patterns: ["*.pt", "*.safetensors"]  # File patterns to match

# =============================================================================
# Default Job
# The job to run when no job is specified
# =============================================================================
default_job: "fetch-all"

# =============================================================================
# Jobs
# Define specific tasks to run
# Each job is self-contained with all necessary settings
# =============================================================================
jobs:
  # Process all model types with full settings
  fetch-all:
    type: scan-paths
    recursive: true      # Search in subdirectories
    skip_existing: true  # Skip files that already have metadata
    verify_hashes: true  # Verify file hashes against CivitAI data
    paths: ["lora"]      # Process these path types
    output:
      metadata:
        format: "json"
        path: "{model_dir}"     # Where to save metadata
        filename: "{model_name}.json"  # Metadata filename
        html:
          enabled: true         # Generate HTML preview pages
          filename: "{model_name}.html"  # HTML filename
      images:
        save: true             # Download preview images
        path: "{model_dir}"    # Where to save images
        max_count: 4           # Maximum number of images to download
        filenames:
          preview: "{model_name}.preview{ext}"  # Preview image filename pattern
    organization:
      enabled: false            # Enable model organization
      dry_run: false            # [true/false] Simulate file operations without making changes
      template: "by_type_and_basemodel"  # Organization template to use
      custom_template: ""       # Custom organization path template (leave empty to use predefined template)
      output_dir: "{model_dir}/organized"  # Where to put organized files
      operation_mode: "move"    # [copy/move/symlink] How to organize files

  # Metadata-only job (no images)
  metadata-only:
    type: scan-paths
    recursive: true
    skip_existing: true
    verify_hashes: true
    paths: ["lora"]
    output:
      metadata:
        format: "json"
        path: "{model_dir}"
        filename: "{model_name}.json"
        html:
          enabled: true
          filename: "{model_name}.html"
      images:
        save: false             # Don't download images

  # Organize existing files
  organize-files:
    type: scan-paths
    recursive: true
    skip_existing: false
    verify_hashes: false
    paths: ["lora"]
    output:
      metadata:
        format: "json"
        path: "{model_dir}"
        filename: "{model_name}.json"
        html:
          enabled: false
      images:
        save: false
    organization:
      enabled: true
      dry_run: false
      template: "by_type_and_basemodel"
      output_dir: "{model_dir}/organized"
      operation_mode: "move"

  # Generate gallery from existing files
  generate-gallery:
    type: scan-paths
    recursive: true
    skip_existing: false
    verify_hashes: false
    paths: ["lora", "checkpoints"]
    generate_gallery: true
    gallery_path: "gallery.html"
    gallery_title: "Model Gallery"
    output:
      metadata:
        format: "json"
        path: "{model_dir}"
        filename: "{model_name}.json"
        html:
          enabled: false
      images:
        save: false

  # Synchronize LoRA trigger words
  sync-triggers:
    type: sync-lora-triggers
    description: "Synchronize LoRA trigger words"
    recursive: true
    loras_file: "loras.json"
    paths: ["lora"]

# =============================================================================
# Scanner Settings
# Configure how the scanner operates and caches data
# =============================================================================
scanner:
  cache_dir: ".civitscraper_cache"  # Where to store cache files
  cache_validity: 86400            # [seconds] Cache lifetime (24 hours)
  force_refresh: false             # [true/false] Ignore cache and force refresh

# =============================================================================
# Logging Configuration
# Control how the application logs information
# =============================================================================
logging:
  level: DEBUG                     # [DEBUG/INFO/WARNING/ERROR/CRITICAL] Main log level

  # Console output settings
  console:
    enabled: true                  # [true/false] Log to console
    level: INFO                    # Console log level
    simple: false                  # Use detailed format for debugging

  # File logging settings
  file:
    enabled: true                  # [true/false] Log to file
    level: DEBUG                   # File log level
    directory: logs                # Log file directory
    max_size: 10                   # [MB] Max log file size
    backup_count: 5                # Number of backup files to keep
